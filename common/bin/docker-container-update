#!/bin/bash

set -euom pipefail
IFS=$'\n\t'

source sops-source

# Helper functions

update() {
  name="${1:-}"
  current="${2:-}"
  latest="${3:-}"
  docker_flags=("-d" "--force-recreate")
  [ -n "${4:-}" ] && docker_flags+=("${@: 4}")

  if [ "${current}" !=  "${latest}" ]; then
    echo "Updating ${name}..."
    docker compose up "${docker_flags}"
    echo "Updated ${name}"
  else
    echo "${name} is up to date."
  fi
}

# Plugins

caddyp() {
  current=$(docker exec caddy caddy version | awk '{ print $1 }')
  latest=$(curl -s https://api.github.com/repos/caddyserver/caddy/releases/latest | yq ".tag_name")
  update "${name}" "${current}" "${latest}" --build
}

# Main

echo "Checking for Docker container updates..."
for d in ~/docker/*/; do
  compose="${d}"docker-compose.yml
  [ ! -f "${compose}" ] && continue

  cd "${d}"
  name=$(basename "${d}")
  pluginName="${name}p"

  if [ "$(type -t "${pluginName}")" = "function" ]; then
    echo -e "\nRunning ${name} plugin..."
    "${pluginName}" "${name}"
    continue
  fi

  readarray -t image_names < <(yq ".services.*.image" < docker-compose.yml)
  for image_name in "${image_names[@]}"; do
    no_tag=$(echo "${image_name}" | cut -d ":" -f1)
    old_id=$(docker compose images | grep "${no_tag}" || [ $? == 1 ]) # Split over two lines to handle when grep exits with status 1
    old_id=$(echo "${old_id}" | awk '{ print $4 }')

    echo -e "\nChecking for updates for ${image_name}..."
    docker compose pull -q

    new_id=$(docker images ${image_name} | sed -n 2p | awk '{ print $3 }')
    
    update "${name}" "${old_id}" "${new_id}"
  done
done

read -p "Cleanup Docker? (docker system prune -a --volumes -f) [Y/n] " -n 1 -r reply
echo
[[ ! "${reply}" =~ ^[Nn]$ ]] && docker system prune -a --volumes -f
